\hypertarget{main_8cpp}{}\doxysection{main.\+cpp File Reference}
\label{main_8cpp}\index{main.cpp@{main.cpp}}
{\ttfamily \#include \char`\"{}Semaphore.\+h\char`\"{}}\newline
Include dependency graph for main.\+cpp\+:
% FIG 0
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{main_8cpp_a9eaffd23c18ab817b9a3ab59b6054d1f}\label{main_8cpp_a9eaffd23c18ab817b9a3ab59b6054d1f}} 
std\+::shared\+\_\+ptr$<$ \mbox{\hyperlink{classSemaphore}{Semaphore}} $>$ {\bfseries mutex} (new \mbox{\hyperlink{classSemaphore}{Semaphore}}(1))
\item 
void \mbox{\hyperlink{main_8cpp_a3c9683d6a27ab2759968c0378236e661}{update\+Task}} (std\+::shared\+\_\+ptr$<$ \mbox{\hyperlink{classSemaphore}{Semaphore}} $>$ first\+Sem, int num\+Updates)
\item 
int \mbox{\hyperlink{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}{main}} (void)
\end{DoxyCompactItemize}
\doxysubsection*{Variables}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{main_8cpp_a2d5b01367ae1267dfac47c7875aac5e4}\label{main_8cpp_a2d5b01367ae1267dfac47c7875aac5e4}} 
int {\bfseries shared\+Variable} =0
\end{DoxyCompactItemize}


\doxysubsection{Function Documentation}
\mbox{\Hypertarget{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}\label{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}} 
\index{main.cpp@{main.cpp}!main@{main}}
\index{main@{main}!main.cpp@{main.cpp}}
\doxysubsubsection{\texorpdfstring{main()}{main()}}
{\footnotesize\ttfamily int main (\begin{DoxyParamCaption}\item[{void}]{ }\end{DoxyParamCaption})}

$<$ Launch the threads ~\newline


$<$ Join the threads with the main thread\mbox{\Hypertarget{main_8cpp_a3c9683d6a27ab2759968c0378236e661}\label{main_8cpp_a3c9683d6a27ab2759968c0378236e661}} 
\index{main.cpp@{main.cpp}!updateTask@{updateTask}}
\index{updateTask@{updateTask}!main.cpp@{main.cpp}}
\doxysubsubsection{\texorpdfstring{updateTask()}{updateTask()}}
{\footnotesize\ttfamily void update\+Task (\begin{DoxyParamCaption}\item[{std\+::shared\+\_\+ptr$<$ \mbox{\hyperlink{classSemaphore}{Semaphore}} $>$}]{first\+Sem,  }\item[{int}]{num\+Updates }\end{DoxyParamCaption})}

Updates the variable allowing it to be updated within a mutex In update\+Task, the shared\+Variable value begins at one and as each thread accesses this value within the loop, increments it. The mutex ensures only one thread at a time. 